#algortihme de Panjer
panjer.poisson<-function(lam,fB,xmax)
{
  # Algorithme de Panjer
  # Cas Poisson
  # Loi discrete pour B
  aa<-0
  bb<-lam
  ll<-length(fB)
  fX<-exp(lam*(fB[1]-1))
  fB<-c(fB,rep(0,xmax-ll+1))
  for (i in 1:xmax)
  {
    j<-i+1
    fX<-c(fX,(1/(1-aa*fB[1]))*sum(fB[2:j]*fX[i:1]*(bb*(1:i)/i+aa)))    
  }
  
  return(fX)
}

#Nombre de sinistre en fonction de chaque année
x <- c(rep(2,5),rep(1,18),rep(0,100-23))


#Optimisation pour vérifier la valeur de lambda
maxlambda <- function(lambda, x){
  val <- sum(log((exp(-lambda)*lambda^x)/factorial(x)))
  return(val)
}
lambda = optimize(maxlambda, c(0.01,1), x, maximum = TRUE)$maximum

#informations liées au tableau du sujet
n = 28
b <- c(5392,5172,4652,2699,1230,706,618,587,519,470,
       463,362,303,285,198,188,163,161,149,148,147,145,132,131,129,124,115,103)

#calc. des paramètres 
mu = sum(log(b))/n
sigma2 = sum((log(b)-mu)^2)/n

k0 = 10000
mu= mu
sig = sqrt(sigma2)
lambda = 0.28

# discretisation upper
vk<-1:10000
hh<-1
vkh<-vk*hh
vfBup<-plnorm(vkh,mu,sig)-plnorm(vkh-hh,mu,sig)
vfXup<-panjer.poisson(lam=lambda,fB=vfBup,xmax=10000)
nup<-length(vfXup)

sum(vfXup)

EXup<-sum((0:(nup-1))*hh*vfXup)
c(EX,EXup)

# discretisation lower
vk<-1:10000
hh<-1
vkh<-vk*hh
vfBlow<-c(0,plnorm(vkh,mu,sig)-plnorm(vkh-hh,mu,sig))
vfXlow<-panjer.poisson(lam=lambda,fB=vfBlow,xmax=10000)
nlow<-length(vfXlow)

sum(vfXlow)

#espérance Upper et Lower
EXup<-sum((0:(nup-1))*hh*vfXup)
EXlow<-sum((0:(nlow-1))*hh*vfXlow)
c(EXlow,EXup)

#variance Lower et Upper
var_X_upper<-sum(((0:(nup-1))^2)*vfXup)-EXup^2
var_X_lower<-sum(((0:(nlow-1))^2)*vfXlow)-EXlow^2
c(var_X_lower,var_X_upper)

#Ecart Type upper et lower
sig_X_upper<-sqrt(var_X_upper)
sig_X_lower<-sqrt(var_X_lower)

c(sig_X_lower,sig_X_upper)

#graphique
#points demandé par l'énoncé
points_enonce<-c(104,146, 286, 707, 2700, 5173, 5393)
F_barre_upper<-1-FX_upper[points_enonce]

F_barre_lower<-1-FX_lower[points_enonce]

valeurs<-cbind(F_barre_lower,F_barre_upper)
  
round(valeurs,digits=4)

FX_upper<-cumsum(vfXup)
FX_lower<-cumsum(vfXlow)

plot(FX_upper,type="l",lty=1, lwd=2,main="Fonction de répartition de X Upper/Lower", xlab="x", ylab="F(x)",col="blue")
lines(FX_lower,col="green", lty=2, lwd=2)

legend(6500, 0.8, legend=c("FX Upper","FX Lower"),lty=c(1,2), cex=1.1,bg='lightgrey',lwd=2:2,col=c("blue","green"))


legend(6500, 0.8, legend=c("FX Upper", 
                          "FX Lower"), col=c("blue", "green","red"), 
       lty=c(1,2), cex=1.1,bg='lightgrey',lwd=2:2,pch=c(NA,1,NA))


#Value at Risk 
kappa<-c(0.99,0.995)
#upper
VaR_X_upper_function<- function(kappa) sum(FX_upper<kappa)
VaR_X_upper<-sapply(kappa,function(kappa) VaR_X_upper_function(kappa))
#lower
VaR_X_lower_function<- function(kappa) sum(FX_lower<kappa)
VaR_X_lower<-sapply(kappa,function(kappa) VaR_X_lower_function(kappa))

cbind(kappa,VaR_X_lower,VaR_X_upper)

#Tail Value at Risk
#upper
long<-length(vfXup)-1
vj<-0:long
esp_tro_upper_function<-function(VaR_X_upper) sum(vj*vfXup*(vj>VaR_X_upper))
esp_tro_upper<-sapply(VaR_X_upper,function(VaR_X_upper) esp_tro_upper_function(VaR_X_upper))

TVAR_X_upper<-(esp_tro_upper+VaR_X_upper*(FX_upper[VaR_X_upper+1]-kappa))/(1-kappa)

#lower
esp_tro_lower_function<-function(VaR_X_lower) sum(vj*vfXlow*(vj>VaR_X_lower))
esp_tro_lower<-sapply(VaR_X_lower,function(VaR_X_lower) esp_tro_lower_function(VaR_X_lower))

TVAR_X_lower<-(esp_tro_lower+VaR_X_lower*(FX_lower[VaR_X_lower+1]-kappa))/(1-kappa)


cbind(kappa,TVAR_X_lower,TVAR_X_upper)

#test du khideux
value_nb_sinistre<- c(0,1,2)
ei <- 100*exp(-lambda)*(lambda**value_nb_sinistre)/factorial(value_nb_sinistre)
value_nb_annee_sinistre <- c(77,18,5)
sum((value_nb_annee_sinistre-ei)^2/ei)


#Autres pour vérification et non utile à l'exercice

long<-length(vfXup)-1
vj<-0:long
EXuptronq<-sum(vj*vfXup*(vj>VaRXup))
TVaRXup<-((EXuptronq+VaRXup*(vFXup[VaRXup+1]-kappa))/(1-kappa))*hh
TVaRXup
kappa

# Calcul de la VaR
kappa<-0.99
vFXlow<-cumsum(vfXlow)
VaRXlow<-sum(vFXlow<kappa)
VaRXlow

kappa<-0.99
vFXup<-cumsum(vfXup)
VaRXup<-sum(vFXup<kappa)
VaRXup

c(VaRXup*hh,VaRXlow*hh)

long<-length(vfXlow)-1
vj<-0:long

matplot(c(0,vj[1:2001])*hh,cbind(c(0,vFXlow[1:2001]),c(0,vFXup[1:2001])),type="s",xlab="x",ylab="approx de FX(x)")


# Calcul de la TVaR avec espérance tronquée

long<-length(vfXlow)-1
vj<-0:long
EXlowtronq<-sum(vj*vfXlow*(vj>VaRXlow))
TVaRXlow<-((EXlowtronq+VaRXlow*(vFXlow[VaRXlow+1]-kappa))/(1-kappa))*hh
TVaRXlow

long<-length(vfXup)-1
vj<-0:long
EXuptronq<-sum(vj*vfXup*(vj>VaRXup))
TVaRXup<-((EXuptronq+VaRXup*(vFXup[VaRXup+1]-kappa))/(1-kappa))*hh
TVaRXup
kappa
c(VaRXup*hh,VaRXlow*hh)

c(TVaRXup,TVaRXlow)
